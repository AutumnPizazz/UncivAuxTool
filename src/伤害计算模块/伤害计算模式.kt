package 伤害计算模块

import 开始使用
import kotlin.math.pow

private fun 是否为合法数字(x:String):Boolean = x == "" || !x.matches("-?\\d+(\\.\\d+)?".toRegex())
private fun 伤害计算公式(a:Double,b:Double,c:Double,d:Double,e:Double):Double = (0.1*a+20)*((((b*(1+c/100)/d*(1+e/100)+3)/4).pow(4.0) +1)/2)

fun 伤害计算模式() {
    println("您已进入伤害计算模式,请按提示输入以下参数")

    print("攻击方血量(%):")
    var 攻击方血量_待检查 = readln()
    while(是否为合法数字(攻击方血量_待检查)) {
        println("数据类型错误,请重新输入:")
        攻击方血量_待检查 = readln()
    }
    val 攻击方血量 = 攻击方血量_待检查.toDouble()

    print("攻击方初始战力:")
    var 攻击方初始战力_待检查 = readln()
    while(是否为合法数字(攻击方初始战力_待检查)) {
        println("数据类型错误,请重新输入:")
        攻击方初始战力_待检查 = readln()
    }
    val 攻击方初始战力 = 攻击方初始战力_待检查.toDouble()

    print("攻击方所有增益之和(%):")
    var 攻击方所有增益之和_待检查 = readln()
    while(是否为合法数字(攻击方所有增益之和_待检查)) {
        println("数据类型错误,请重新输入:")
        攻击方所有增益之和_待检查 = readln()
    }
    val 攻击方所有增益之和 = 攻击方所有增益之和_待检查.toDouble()

    print("防守方初始战力:")
    var 防守方初始战力_待检查 = readln()
    while(是否为合法数字(防守方初始战力_待检查)) {
        println("数据类型错误,请重新输入:")
        防守方初始战力_待检查 = readln()
    }
    val 防守方初始战力 = 防守方初始战力_待检查.toDouble()

    print("防守方所有增益之和(%):")
    var 防守方所有增益之和_待检查 = readln()
    while(是否为合法数字(防守方所有增益之和_待检查)) {
        println("数据类型错误,请重新输入:")
        防守方所有增益之和_待检查 = readln()
    }
    val 防守方所有增益之和 = 防守方所有增益之和_待检查.toDouble()

    val 伤害期望 = 伤害计算公式(攻击方血量,攻击方初始战力,攻击方所有增益之和,防守方初始战力,防守方所有增益之和)
    val 伤害最小值 = 伤害期望*0.8
    val 伤害最大值 = 伤害期望*1.2
    val 反伤_伤害期望 = 伤害计算公式(100.0,防守方初始战力,防守方所有增益之和,攻击方初始战力,攻击方所有增益之和)
    val 反伤_伤害最小值 = 反伤_伤害期望*0.8
    val 反伤_伤害最大值 = 反伤_伤害期望*1.2
    println("防守方受到的伤害范围为$伤害最小值~$伤害最大值,期望为$伤害期望")
    println("反伤范围为$反伤_伤害最小值~$反伤_伤害最大值,期望为$反伤_伤害期望(如果攻击方为远程单位请忽略)")
    println("计算结束,将返回开始菜单")
}